<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:cache="http://www.springframework.org/schema/cache"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.1.xsd
        "
        default-lazy-init="true">
    
		<bean id="propertyConfigurer"
			class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
			<property name="locations">
				<list>
					<value>classpath:jdbc.properties</value>
					<value>classpath:config.properties</value>
					<value>classpath:redis.properties</value>
				</list>
			</property>
		</bean>
	
	     <!-- 注解支持 -->
        <context:annotation-config />

        <!-- 启动组件扫描，排除@Controller组件（Controller注解已经在applicationContext-servlet.xml文件里面进行注解），该组件由SpringMVC配置文件扫描 -->
        <context:component-scan base-package="com.lp">
            <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>  
        </context:component-scan> 
    
    	<!-- 程序启动时执行	-->
    	<bean id="springContextHolder" class="com.lp.framework.utils.SpringContextHolder" lazy-init="false"></bean> 
    	
    	<bean id="systemStartupInit" class="com.lp.init.SystemStartupInit" init-method="init" lazy-init="false"></bean>
    	
    
        <!-- 数据源 -->
        <bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
            <!-- 数据库驱动 -->
            <property name="driverClass" value="com.mysql.jdbc.Driver" />
            <!-- 相应驱动的jdbcUrl-->
            <property name="jdbcUrl" value="${db.jdbcUrl}" />
            <!-- 数据库的用户名 -->
            <property name="user" value="${db.user}" />
            <!-- 数据库的密码 -->
            <property name="password" value="${db.password}" />
            
            <!-- 连接池属性配置 -->
            <!-- 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 -->  
	        <property name="idleConnectionTestPeriod" value="${db.idleConnectionTestPeriod}" />  
	
	        <!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 -->  
	        <property name="idleMaxAge" value="${db.idleMaxAge}" />  
	
	        <!-- 每个分区最大的连接数 -->  
	        <property name="maxConnectionsPerPartition" value="${db.maxConnectionsPerPartition}" />  
	
	        <!-- 每个分区最小的连接数 -->  
	        <property name="minConnectionsPerPartition" value="${db.minConnectionsPerPartition}" />  
	
	        <!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定-->  
	        <property name="partitionCount" value="${db.partitionCount}" />  
	
	        <!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->  
	        <property name="acquireIncrement" value="${db.acquireIncrement}" />  
	
	        <!-- 缓存prepared statements的大小，默认值：0 -->  
	        <property name="statementsCacheSize" value="${db.statementsCacheSize}" />  
	
	        <!-- 每个分区释放链接助理进程的数量，默认值：3，除非你的一个数据库连接的时间内做了很多工作，不然过多的助理进程会影响你的性能 -->  
	        <property name="releaseHelperThreads" value="${db.releaseHelperThreads}" />  
       </bean>
       
       <!-- 用于指定持久化实现厂商类 -->
       <bean id="persistenceProvider" class="org.hibernate.ejb.HibernatePersistence"/>
       <!-- 用于设置JPA实现厂商的特定属性 -->
       <bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />  
       <!-- 用于指定一些高级特性 -->
       <bean id="jpaDialect" class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/> 
       
     	<!-- JPA实体管理器工厂 -->
    	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">  
           <property name="dataSource" ref="dataSource"/>						<!-- 指定数据源 -->
           <property name="persistenceProvider" ref="persistenceProvider"/>		
           <property name="jpaVendorAdapter" ref="jpaVendorAdapter"/>  
      	   <property name="jpaDialect" ref="jpaDialect"/>             
           <property name="packagesToScan" value="com.lp.entity"/>
           
           <property name="jpaProperties">
            <props>
             <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
             <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
             <prop key="hibernate.max_fetch_depth">3</prop>
             <prop key="hibernate.jdbc.fetch_size">18</prop>
             <prop key="hibernate.jdbc.batch_size">10</prop>
             <prop key="hibernate.hbm2ddl.auto">update</prop>
             <prop key="hibernate.show_sql">true</prop>
             <prop key="hibernate.format_sql">true</prop>
             <prop key="javax.persistence.validation.mode">none</prop>
            </props>
           </property>
       	</bean>
       
    <!-- 事务管理器 -->  
    <bean id="txManager" class="org.springframework.orm.jpa.JpaTransactionManager">  
        <property name="entityManagerFactory" ref="entityManagerFactory" />  
    </bean> 
     
    <!-- 注解式事务 --> 
    <tx:annotation-driven transaction-manager="txManager"/>
    
    <!-- 定义使用事务的方法 -->  
    <!-- 
	 <tx:advice id="txAdvice" transaction-manager="txManager">  
	   <tx:attributes>  
	    <tx:method name="save*" propagation="REQUIRED"/>  
	    <tx:method name="del*" propagation="REQUIRED"/>  
	    <tx:method name="upd*" propagation="REQUIRED"/>  
	    <tx:method name="remove*" propagation="REQUIRED"/>  
	    <tx:method name="*" read-only="true"/>  
	   </tx:attributes>    
	  </tx:advice>  
     -->
     <!-- 启用缓存注解功能 -->
    <!-- <ehcache:annotation-driven cache-manager="ehCacheManager" />   -->
    
    <!-- 缓存配置 -->
	<!-- 启用缓存注解功能(请将其配置在Spring主配置文件中) -->
	<cache:annotation-driven cache-manager="cacheManager" />
	<!-- 若只想使用Spring自身提供的缓存器,则注释掉下面的两个关于Ehcache配置的bean,并启用上面的SimpleCacheManager即可 -->
	<!-- Spring提供的基于的Ehcache实现的缓存管理器 -->
    
    <!-- cacheManager工厂类，指定ehcache.xml的位置 -->    
    <bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
    	<property name="configLocation"  value="classpath:ehcache.xml"/> 
    </bean>
    
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="cacheManagerFactory" />
	</bean>
	
	<!-- 测试 -->
	<bean id="testBean" class="com.lp.test.aop.TestBeans"></bean>
	
	<!-- 对Test类进行AOP拦截 -->
	<!-- 后续进行aop aspect的测试 -->
	
	<!-- 导入schedule的配置，定时任务配置 -->
	<import resource="scheduler-config.xml"/>
    <!-- 导入redis的配置 -->
    <import resource="redis-config.xml"/>
	
</beans>